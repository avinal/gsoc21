<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>New Buildsystem and CI/CD - report</title><link href="https://gsoc.avinal.space/" rel="alternate"></link><link href="https://gsoc.avinal.space/feeds/report.atom.xml" rel="self"></link><id>https://gsoc.avinal.space/</id><updated>2021-08-19T23:07:00+05:30</updated><subtitle>A GSoC project by Avinal Kumar</subtitle><entry><title>Final Evaluation Report</title><link href="https://gsoc.avinal.space/posts/report/final-evaluation.html" rel="alternate"></link><published>2021-08-19T23:07:00+05:30</published><updated>2021-08-19T23:07:00+05:30</updated><author><name>Avinal Kumar</name></author><id>tag:gsoc.avinal.space,2021-08-19:/posts/report/final-evaluation.html</id><summary type="html">&lt;p class="first last"&gt;In the second phase of GSoC 2021 &amp;#64; The FOSSology Project, I worked on testing and packaging configuration. I also migrated the CI services from Travis CI to GitHub Actions.&lt;/p&gt;
</summary><content type="html">&lt;style&gt;
.rd {color:red;font-weight:bold}
.gr{color:green;font-weight:bold}
.or{color:orange;font-weight:medium}
ul{margin-bottom:0}
&lt;/style&gt;&lt;div class="section" id="the-cmake-build-system"&gt;
&lt;h2&gt;The CMake Build system&lt;/h2&gt;
&lt;p&gt;FOSSology is quite an old and mature project. The project has been using bare metal &lt;strong&gt;Makefiles&lt;/strong&gt;. As the project is growing with new agents and modernization it was required to have a modern build system.&lt;/p&gt;
&lt;p&gt;The FOSSology is a suite of well-integrated and synchronized sub-projects (called agents) written in C, C++, and PHP. Most of the major agents are in C, C++ and that made CMake an obvious choice for a new build system for FOSSology. CMake is a versatile set of build, test, and packaging tools and is the most popular choice of C/C++ developers. CMake can be extended to create a build system for other languages too via custom scripts.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="github-actions-ci-cd"&gt;
&lt;h2&gt;GitHub Actions CI/CD&lt;/h2&gt;
&lt;img alt="A CI Meme" class="float-md-right rounded border border-info ml-3" src="/images/ci.png" style="width: 350px;" /&gt;
&lt;p&gt;Since the FOSSology project moved on Github, it has used only the free Travis CI service for OSS projects.
At the time of writing the Travis CI has reduced its free tier CI services. GitHub Actions provides faster builds. Since GitHub Actions is a fully managed service by GitHub, we donâ€™t need to know how to scale and operate the infrastructure to run it.&lt;/p&gt;
&lt;p&gt;It is straightforward to use with GitHub because when we fork a repository, the actions automatically get forked. This allows you to test and build projects very efficiently and even run them closer to the developer. Also, you have readily available access to the GitHub API, making it more popular among developers.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="improvements-over-previous-build-system-and-ci"&gt;
&lt;h2&gt;Improvements over previous build system and CI&lt;/h2&gt;
&lt;p&gt;The new build system and CI brings a lot of improvements and features. The list below describes them.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;CMake enforces out-of-source builds. This was already possible with the previous build system but not a strict requirement. This feature keeps the source code clean and makes cleaning the build artifacts easy. (Just remove the build folder :)&lt;/li&gt;
&lt;li&gt;One of the major improvements over the previous build system is faster build times. CMake generates parallel build-enabled configurations for all generators. In our tests, the new build system is at least twice as fast as the previous one. With further improvement in configuration, we will be able to further cut the build times.&lt;/li&gt;
&lt;li&gt;Previously FOSSology can only be built using &lt;em&gt;Unix Makefiles&lt;/em&gt;. With CMake, we can now use many other popular generators such as &lt;em&gt;Ninja&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;Now it is also very flexible to choose different compilers. This will help support more platforms and architecture in the future. As of now, we are experimenting with Clang compilers.&lt;/li&gt;
&lt;li&gt;FOSSology is quite an old project and a lot of agent testing code was written in the last decade. Initially, none of them were compatible with the new build system, but we were able to hack most of the test code using better-improved methods. Test times have also improved.&lt;/li&gt;
&lt;li&gt;Migrating from Travis CI to GitHub Actions was another big move and for the most part, it removes the dependency on a third-party CI service. Along with that GitHub Actions provides better build times, tons of new features, and better integration with other GitHub services.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="deliverables"&gt;
&lt;h2&gt;Deliverables&lt;/h2&gt;
&lt;div class="alert alert-info" role="alert"&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Final Pull Request &lt;a class="badge badge-info" href="https://github.com/fossology/fossology/pull/2075"&gt;#2075&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Pull Request Branch &lt;a class="badge badge-info" href="https://github.com/avinal/fossology/tree/avinal/feat/buildsystem"&gt;avinal/feat/buildsystem&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Working Branch (individual commits) &lt;ul&gt;
&lt;li&gt;&lt;a class="badge badge-info" href="https://github.com/avinal/fossology/tree/avinal/feat/cmake-buildsystem"&gt;avinal/feat/cmake-buildsystem&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="badge badge-info" href="https://github.com/avinal/fossology/tree/avinal/feat/testing"&gt;avinal/feat/testing&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Project Issue &lt;a class="badge badge-info" href="https://github.com/fossology/fossology/issues/1913"&gt;#1913&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Project Discussion &lt;a class="badge badge-info" href="https://github.com/fossology/fossology/discussions/1931"&gt;#1931&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Weekly Reports&lt;ul&gt;
&lt;li&gt;&lt;a class="badge badge-info" href="https://gsoc.avinal.space"&gt;Personal Blog&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="badge badge-info" href="https://fossology.github.io/gsoc/docs/2021/buildsystem/"&gt;FOSSology Official Blog&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;
&lt;/div&gt;&lt;p&gt;&lt;strong&gt;CMake Build System Tasks&lt;/strong&gt;&lt;/p&gt;
&lt;table border="1" class="table table-sm table-hover table-bordered table-responsive docutils align-center"&gt;
&lt;colgroup&gt;
&lt;col width="5%" /&gt;
&lt;col width="15%" /&gt;
&lt;col width="10%" /&gt;
&lt;col width="10%" /&gt;
&lt;col width="20%" /&gt;
&lt;col width="15%" /&gt;
&lt;col width="25%" /&gt;
&lt;/colgroup&gt;
&lt;thead valign="bottom"&gt;
&lt;tr&gt;&lt;th class="head"&gt;#&lt;/th&gt;
&lt;th class="head"&gt;Agents&lt;/th&gt;
&lt;th class="head"&gt;Build&lt;/th&gt;
&lt;th class="head"&gt;Install&lt;/th&gt;
&lt;th class="head"&gt;Testing&lt;/th&gt;
&lt;th class="head"&gt;Packaging&lt;/th&gt;
&lt;th class="head"&gt;Remarks&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;adj2nest&lt;/td&gt;
&lt;td&gt;&lt;span class="gr"&gt;YES&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span class="gr"&gt;YES&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&amp;nbsp;&lt;/td&gt;
&lt;td&gt;&lt;span class="gr"&gt;YES&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&amp;nbsp;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;buckets&lt;/td&gt;
&lt;td&gt;&lt;span class="gr"&gt;YES&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span class="gr"&gt;YES&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&amp;nbsp;&lt;/td&gt;
&lt;td&gt;&lt;span class="gr"&gt;YES&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&amp;nbsp;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;cli&lt;/td&gt;
&lt;td&gt;&lt;span class="gr"&gt;YES&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span class="gr"&gt;YES&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;ul class="first last simple"&gt;
&lt;li&gt;&lt;span class="rd"&gt;Functional&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/td&gt;
&lt;td&gt;&lt;span class="gr"&gt;YES&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&amp;nbsp;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;copyright&lt;/td&gt;
&lt;td&gt;&lt;span class="gr"&gt;YES&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span class="gr"&gt;YES&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;ul class="first last simple"&gt;
&lt;li&gt;&lt;span class="gr"&gt;Functional&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class="gr"&gt;Unit&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/td&gt;
&lt;td&gt;&lt;span class="gr"&gt;YES&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&amp;nbsp;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;5&lt;/td&gt;
&lt;td&gt;debug&lt;/td&gt;
&lt;td&gt;&amp;nbsp;&lt;/td&gt;
&lt;td&gt;&lt;span class="gr"&gt;YES&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&amp;nbsp;&lt;/td&gt;
&lt;td&gt;&lt;span class="gr"&gt;YES&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&amp;nbsp;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;6&lt;/td&gt;
&lt;td&gt;decider&lt;/td&gt;
&lt;td&gt;&lt;span class="gr"&gt;YES&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span class="gr"&gt;YES&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;ul class="first last simple"&gt;
&lt;li&gt;&lt;span class="gr"&gt;Functional&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class="gr"&gt;Unit&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/td&gt;
&lt;td&gt;&lt;span class="gr"&gt;YES&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&amp;nbsp;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;7&lt;/td&gt;
&lt;td&gt;deciderjob&lt;/td&gt;
&lt;td&gt;&lt;span class="gr"&gt;YES&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span class="gr"&gt;YES&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;ul class="first last simple"&gt;
&lt;li&gt;&lt;span class="gr"&gt;Functional&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/td&gt;
&lt;td&gt;&lt;span class="gr"&gt;YES&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&amp;nbsp;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;8&lt;/td&gt;
&lt;td&gt;delagent&lt;/td&gt;
&lt;td&gt;&lt;span class="gr"&gt;YES&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span class="gr"&gt;YES&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;ul class="first last simple"&gt;
&lt;li&gt;&lt;span class="rd"&gt;Functional&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class="rd"&gt;Unit&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/td&gt;
&lt;td&gt;&lt;span class="gr"&gt;YES&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&amp;nbsp;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;9&lt;/td&gt;
&lt;td&gt;demomod&lt;/td&gt;
&lt;td&gt;&lt;span class="or"&gt;YES&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span class="or"&gt;YES&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;ul class="first last simple"&gt;
&lt;li&gt;&lt;span class="or"&gt;Functional&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class="or"&gt;Unit&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/td&gt;
&lt;td&gt;&lt;span class="or"&gt;NO&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;em&gt;(Not Used)&lt;/em&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;10&lt;/td&gt;
&lt;td&gt;example_wc_agent&lt;/td&gt;
&lt;td&gt;&lt;span class="or"&gt;YES&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span class="or"&gt;YES&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;ul class="first last simple"&gt;
&lt;li&gt;&lt;span class="or"&gt;Functional&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class="or"&gt;Unit&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/td&gt;
&lt;td&gt;&lt;span class="or"&gt;NO&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;em&gt;(Not Used)&lt;/em&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;11&lt;/td&gt;
&lt;td&gt;clib&lt;/td&gt;
&lt;td&gt;&lt;span class="gr"&gt;YES&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span class="gr"&gt;YES&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;ul class="first last simple"&gt;
&lt;li&gt;&lt;span class="gr"&gt;Functional&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class="gr"&gt;Unit&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/td&gt;
&lt;td&gt;&lt;span class="gr"&gt;YES&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&amp;nbsp;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;12&lt;/td&gt;
&lt;td&gt;cpplib&lt;/td&gt;
&lt;td&gt;&lt;span class="gr"&gt;YES&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span class="gr"&gt;YES&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;ul class="first last simple"&gt;
&lt;li&gt;&lt;span class="gr"&gt;Unit&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/td&gt;
&lt;td&gt;&lt;span class="gr"&gt;YES&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&amp;nbsp;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;13&lt;/td&gt;
&lt;td&gt;phplib&lt;/td&gt;
&lt;td&gt;&lt;span class="gr"&gt;YES&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span class="gr"&gt;YES&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;ul class="first last simple"&gt;
&lt;li&gt;&lt;span class="gr"&gt;Functional&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class="gr"&gt;Unit&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/td&gt;
&lt;td&gt;&lt;span class="gr"&gt;YES&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;1 functional
test needs fix&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;14&lt;/td&gt;
&lt;td&gt;maintagent&lt;/td&gt;
&lt;td&gt;&lt;span class="gr"&gt;YES&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span class="gr"&gt;YES&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&amp;nbsp;&lt;/td&gt;
&lt;td&gt;&lt;span class="gr"&gt;YES&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&amp;nbsp;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;15&lt;/td&gt;
&lt;td&gt;mimetype&lt;/td&gt;
&lt;td&gt;&lt;span class="gr"&gt;YES&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span class="gr"&gt;YES&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;ul class="first last simple"&gt;
&lt;li&gt;&lt;span class="gr"&gt;Functional&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class="gr"&gt;Unit&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/td&gt;
&lt;td&gt;&lt;span class="gr"&gt;YES&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&amp;nbsp;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;16&lt;/td&gt;
&lt;td&gt;monk&lt;/td&gt;
&lt;td&gt;&lt;span class="gr"&gt;YES&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span class="gr"&gt;YES&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;ul class="first last simple"&gt;
&lt;li&gt;&lt;span class="gr"&gt;Functional&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class="gr"&gt;Unit&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/td&gt;
&lt;td&gt;&lt;span class="gr"&gt;YES&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&amp;nbsp;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;17&lt;/td&gt;
&lt;td&gt;ninka&lt;/td&gt;
&lt;td&gt;&lt;span class="or"&gt;YES&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span class="or"&gt;YES&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;ul class="first last simple"&gt;
&lt;li&gt;&lt;span class="or"&gt;Functional&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class="or"&gt;Unit&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/td&gt;
&lt;td&gt;&lt;span class="or"&gt;NO&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;em&gt;(Deprecated)&lt;/em&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;18&lt;/td&gt;
&lt;td&gt;nomos&lt;/td&gt;
&lt;td&gt;&lt;span class="gr"&gt;YES&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span class="gr"&gt;YES&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;ul class="first last simple"&gt;
&lt;li&gt;&lt;span class="gr"&gt;Functional&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class="gr"&gt;Unit&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/td&gt;
&lt;td&gt;&lt;span class="gr"&gt;YES&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&amp;nbsp;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;19&lt;/td&gt;
&lt;td&gt;ojo&lt;/td&gt;
&lt;td&gt;&lt;span class="gr"&gt;YES&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span class="gr"&gt;YES&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;ul class="first last simple"&gt;
&lt;li&gt;&lt;span class="gr"&gt;Functional&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class="gr"&gt;Unit&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/td&gt;
&lt;td&gt;&lt;span class="gr"&gt;YES&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;1 functional
test needs fix&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;20&lt;/td&gt;
&lt;td&gt;pkgagent&lt;/td&gt;
&lt;td&gt;&lt;span class="gr"&gt;YES&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span class="gr"&gt;YES&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;ul class="first last simple"&gt;
&lt;li&gt;&lt;span class="gr"&gt;Functional&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class="gr"&gt;Unit&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/td&gt;
&lt;td&gt;&lt;span class="gr"&gt;YES&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&amp;nbsp;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;21&lt;/td&gt;
&lt;td&gt;readmeoss&lt;/td&gt;
&lt;td&gt;&lt;span class="gr"&gt;YES&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span class="gr"&gt;YES&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&amp;nbsp;&lt;/td&gt;
&lt;td&gt;&lt;span class="gr"&gt;YES&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&amp;nbsp;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;22&lt;/td&gt;
&lt;td&gt;regexscan&lt;/td&gt;
&lt;td&gt;&lt;span class="or"&gt;YES&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span class="or"&gt;YES&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&amp;nbsp;&lt;/td&gt;
&lt;td&gt;&lt;span class="or"&gt;NO&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;em&gt;(Deprecated)&lt;/em&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;23&lt;/td&gt;
&lt;td&gt;reportImport&lt;/td&gt;
&lt;td&gt;&lt;span class="gr"&gt;YES&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span class="gr"&gt;YES&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&amp;nbsp;&lt;/td&gt;
&lt;td&gt;&lt;span class="gr"&gt;YES&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&amp;nbsp;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;24&lt;/td&gt;
&lt;td&gt;reuser&lt;/td&gt;
&lt;td&gt;&lt;span class="gr"&gt;YES&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span class="gr"&gt;YES&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;ul class="first last simple"&gt;
&lt;li&gt;&lt;span class="gr"&gt;Functional&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/td&gt;
&lt;td&gt;&lt;span class="gr"&gt;YES&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&amp;nbsp;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;25&lt;/td&gt;
&lt;td&gt;reso&lt;/td&gt;
&lt;td&gt;&lt;span class="gr"&gt;YES&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span class="gr"&gt;YES&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&amp;nbsp;&lt;/td&gt;
&lt;td&gt;&lt;span class="gr"&gt;YES&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&amp;nbsp;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;26&lt;/td&gt;
&lt;td&gt;scheduler&lt;/td&gt;
&lt;td&gt;&lt;span class="gr"&gt;YES&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span class="gr"&gt;YES&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;ul class="first last simple"&gt;
&lt;li&gt;&lt;span class="rd"&gt;Functional&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class="rd"&gt;Unit&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/td&gt;
&lt;td&gt;&lt;span class="gr"&gt;YES&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;Tests needs
fix&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;27&lt;/td&gt;
&lt;td&gt;softwareHeritage&lt;/td&gt;
&lt;td&gt;&lt;span class="gr"&gt;YES&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span class="gr"&gt;YES&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&amp;nbsp;&lt;/td&gt;
&lt;td&gt;&lt;span class="gr"&gt;YES&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&amp;nbsp;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;28&lt;/td&gt;
&lt;td&gt;spasht&lt;/td&gt;
&lt;td&gt;&lt;span class="gr"&gt;YES&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span class="gr"&gt;YES&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&amp;nbsp;&lt;/td&gt;
&lt;td&gt;&lt;span class="gr"&gt;YES&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&amp;nbsp;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;29&lt;/td&gt;
&lt;td&gt;spdx2&lt;/td&gt;
&lt;td&gt;&lt;span class="gr"&gt;YES&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span class="gr"&gt;YES&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;ul class="first last simple"&gt;
&lt;li&gt;&lt;span class="gr"&gt;Functional&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class="gr"&gt;Unit&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/td&gt;
&lt;td&gt;&lt;span class="gr"&gt;YES&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;1 Test failing
in CI&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;30&lt;/td&gt;
&lt;td&gt;unifiedreport&lt;/td&gt;
&lt;td&gt;&lt;span class="gr"&gt;YES&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span class="gr"&gt;YES&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;ul class="first last simple"&gt;
&lt;li&gt;&lt;span class="gr"&gt;Functional&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/td&gt;
&lt;td&gt;&lt;span class="gr"&gt;YES&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&amp;nbsp;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;31&lt;/td&gt;
&lt;td&gt;ununpack&lt;/td&gt;
&lt;td&gt;&lt;span class="gr"&gt;YES&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span class="gr"&gt;YES&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;ul class="first last simple"&gt;
&lt;li&gt;&lt;span class="gr"&gt;Functional&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class="rd"&gt;Unit&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/td&gt;
&lt;td&gt;&lt;span class="gr"&gt;YES&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;Unit tests
needs fix&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;32&lt;/td&gt;
&lt;td&gt;wget_agent&lt;/td&gt;
&lt;td&gt;&lt;span class="gr"&gt;YES&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span class="gr"&gt;YES&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;ul class="first last simple"&gt;
&lt;li&gt;&lt;span class="gr"&gt;Functional&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class="gr"&gt;Unit&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/td&gt;
&lt;td&gt;&lt;span class="gr"&gt;YES&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&amp;nbsp;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;32&lt;/td&gt;
&lt;td&gt;www&lt;/td&gt;
&lt;td&gt;&lt;span class="gr"&gt;YES&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span class="gr"&gt;YES&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;ul class="first last simple"&gt;
&lt;li&gt;&lt;span class="rd"&gt;UI&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/td&gt;
&lt;td&gt;&lt;span class="gr"&gt;YES&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&amp;nbsp;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;strong&gt;GitHub Actions CI Tasks&lt;/strong&gt;&lt;/p&gt;
&lt;table border="1" class="table table-sm table-hover table-bordered table-responsive docutils align-center"&gt;
&lt;colgroup&gt;
&lt;col width="5%" /&gt;
&lt;col width="25%" /&gt;
&lt;col width="70%" /&gt;
&lt;/colgroup&gt;
&lt;thead valign="bottom"&gt;
&lt;tr&gt;&lt;th class="head"&gt;#&lt;/th&gt;
&lt;th class="head"&gt;CI Tasks&lt;/th&gt;
&lt;th class="head"&gt;Status&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;&lt;span class="gr"&gt;build&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;Added Ubuntu 20.04 GCC 8, 9 and Clang, GCC 7 not working&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;&lt;span class="gr"&gt;c/cpp unit test&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;Added, delagent, scheduler and ununpack not working&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;&lt;span class="gr"&gt;phpunit tests&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;Added, delagent and scheduler  functional not working&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;&lt;span class="rd"&gt;cahching&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;Not implemented&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;5&lt;/td&gt;
&lt;td&gt;&lt;span class="rd"&gt;source install&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;Not implemented&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;(&lt;span class="gr"&gt;GREEN&lt;/span&gt;: COMPLETED, &lt;span class="rd"&gt;RED&lt;/span&gt;: INCOMPLETE, &lt;span class="or"&gt;ORANGE&lt;/span&gt;: NOT NEEDED/DEPRECATED)&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="how-it-works-and-how-to-use-it"&gt;
&lt;h2&gt;How it works and how to use it?&lt;/h2&gt;
&lt;div class="embed-responsive embed-responsive-16by9"&gt;
    &lt;iframe class="embed-responsive-item" src="/images/second-build.webm" allowfullscreen&gt;&lt;/iframe&gt;
&lt;/div&gt;&lt;p&gt;The new build system retains the modular and hierarchical structure of the previous build system.  On the other hand, the new build system provides several new flags to control the build. The new build system forces out-of-source build instead of the previous in-source builds. This keeps the source clutter-free and reduces the chance of accidentally deleting source files. &lt;em&gt;Testing still needs some in-source artifacts, this will be solved once all the tests are fixed according to the new build system.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Each agent is a complete CMake sub-project with its independent configuration for building, installing, and testing. That means a single agent can be built and installed separately and even removed from the default build without breaking other builds. The directory structure is as below.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;.
â”œâ”€â”€&lt;span class="w"&gt; &lt;/span&gt;build&lt;span class="w"&gt;                           &lt;/span&gt;&lt;span class="c1"&gt;# temporary directory for build artifacts&lt;/span&gt;
â”œâ”€â”€&lt;span class="w"&gt; &lt;/span&gt;cmake&lt;span class="w"&gt;                           &lt;/span&gt;&lt;span class="c1"&gt;# CMake modules for FOSSology&lt;/span&gt;
â”‚&lt;span class="w"&gt;   &lt;/span&gt;â”œâ”€â”€&lt;span class="w"&gt; &lt;/span&gt;FoPackaging.cmake&lt;span class="w"&gt;           &lt;/span&gt;&lt;span class="c1"&gt;# CMake Packaging configurations&lt;/span&gt;
â”‚&lt;span class="w"&gt;   &lt;/span&gt;â”œâ”€â”€&lt;span class="w"&gt; &lt;/span&gt;FoUtilities.cmake&lt;span class="w"&gt;           &lt;/span&gt;&lt;span class="c1"&gt;# Custom CMake utilities&lt;/span&gt;
â”‚&lt;span class="w"&gt;   &lt;/span&gt;â”œâ”€â”€&lt;span class="w"&gt; &lt;/span&gt;FoVersionFile.cmake&lt;span class="w"&gt;         &lt;/span&gt;&lt;span class="c1"&gt;# VERSION version.php CMake template file&lt;/span&gt;
â”‚&lt;span class="w"&gt;   &lt;/span&gt;â”œâ”€â”€&lt;span class="w"&gt; &lt;/span&gt;SetDefaults.cmake&lt;span class="w"&gt;           &lt;/span&gt;&lt;span class="c1"&gt;# CMake defaults for this project&lt;/span&gt;
â”‚&lt;span class="w"&gt;   &lt;/span&gt;â”œâ”€â”€&lt;span class="w"&gt; &lt;/span&gt;TestInstall.make.in&lt;span class="w"&gt;         &lt;/span&gt;&lt;span class="c1"&gt;# Template makefile for install during tests&lt;/span&gt;
â”‚&lt;span class="w"&gt;   &lt;/span&gt;â””â”€â”€&lt;span class="w"&gt; &lt;/span&gt;VERSION.in&lt;span class="w"&gt;                  &lt;/span&gt;&lt;span class="c1"&gt;# VERSION file template&lt;/span&gt;
â”œâ”€â”€&lt;span class="w"&gt; &lt;/span&gt;src
â”‚&lt;span class="w"&gt;   &lt;/span&gt;â”œâ”€â”€&lt;span class="w"&gt; &lt;/span&gt;agent-1&lt;span class="w"&gt;                     &lt;/span&gt;&lt;span class="c1"&gt;# Agent sub-project&lt;/span&gt;
â”‚&lt;span class="w"&gt;   &lt;/span&gt;â”‚&lt;span class="w"&gt;   &lt;/span&gt;â”œâ”€â”€&lt;span class="w"&gt; &lt;/span&gt;agent&lt;span class="w"&gt;                   &lt;/span&gt;&lt;span class="c1"&gt;# Agent&amp;#39;s source code directory&lt;/span&gt;
â”‚&lt;span class="w"&gt;   &lt;/span&gt;â”‚&lt;span class="w"&gt;   &lt;/span&gt;â”‚&lt;span class="w"&gt;   &lt;/span&gt;â”œâ”€â”€&lt;span class="w"&gt; &lt;/span&gt;agent-source-code
â”‚&lt;span class="w"&gt;   &lt;/span&gt;â”‚&lt;span class="w"&gt;   &lt;/span&gt;â”‚&lt;span class="w"&gt;   &lt;/span&gt;â””â”€â”€&lt;span class="w"&gt; &lt;/span&gt;CMakeLists.txt
â”‚&lt;span class="w"&gt;   &lt;/span&gt;â”‚&lt;span class="w"&gt;   &lt;/span&gt;â”œâ”€â”€&lt;span class="w"&gt; &lt;/span&gt;agent_tests&lt;span class="w"&gt;             &lt;/span&gt;&lt;span class="c1"&gt;# Agent&amp;#39;s test directory&lt;/span&gt;
â”‚&lt;span class="w"&gt;   &lt;/span&gt;â”‚&lt;span class="w"&gt;   &lt;/span&gt;â”‚&lt;span class="w"&gt;   &lt;/span&gt;â”œâ”€â”€&lt;span class="w"&gt; &lt;/span&gt;Unit
â”‚&lt;span class="w"&gt;   &lt;/span&gt;â”‚&lt;span class="w"&gt;   &lt;/span&gt;â”‚&lt;span class="w"&gt;   &lt;/span&gt;â”œâ”€â”€&lt;span class="w"&gt; &lt;/span&gt;Functional
â”‚&lt;span class="w"&gt;   &lt;/span&gt;â”‚&lt;span class="w"&gt;   &lt;/span&gt;â”‚&lt;span class="w"&gt;   &lt;/span&gt;â””â”€â”€&lt;span class="w"&gt; &lt;/span&gt;CMakeLists.txt
â”‚&lt;span class="w"&gt;   &lt;/span&gt;â”‚&lt;span class="w"&gt;   &lt;/span&gt;â”œâ”€â”€&lt;span class="w"&gt; &lt;/span&gt;ui&lt;span class="w"&gt;                      &lt;/span&gt;&lt;span class="c1"&gt;# Agent&amp;#39;s UI source code&lt;/span&gt;
â”‚&lt;span class="w"&gt;   &lt;/span&gt;â”‚&lt;span class="w"&gt;   &lt;/span&gt;â”‚&lt;span class="w"&gt;   &lt;/span&gt;â”œâ”€â”€&lt;span class="w"&gt; &lt;/span&gt;templates
â”‚&lt;span class="w"&gt;   &lt;/span&gt;â”‚&lt;span class="w"&gt;   &lt;/span&gt;â”‚&lt;span class="w"&gt;   &lt;/span&gt;â””â”€â”€&lt;span class="w"&gt; &lt;/span&gt;agent-ui-code
â”‚&lt;span class="w"&gt;   &lt;/span&gt;â”‚&lt;span class="w"&gt;   &lt;/span&gt;â””â”€â”€&lt;span class="w"&gt; &lt;/span&gt;CMakeLists.txt&lt;span class="w"&gt;          &lt;/span&gt;&lt;span class="c1"&gt;# Agent&amp;#39;s top-level CMake configuration&lt;/span&gt;
:&lt;span class="w"&gt;   &lt;/span&gt;:
â”‚&lt;span class="w"&gt;   &lt;/span&gt;â”œâ”€â”€&lt;span class="w"&gt; &lt;/span&gt;other&lt;span class="w"&gt; &lt;/span&gt;agents
:&lt;span class="w"&gt;   &lt;/span&gt;:
â”‚&lt;span class="w"&gt;   &lt;/span&gt;â””â”€â”€&lt;span class="w"&gt; &lt;/span&gt;CMakeLists.txt&lt;span class="w"&gt;              &lt;/span&gt;&lt;span class="c1"&gt;# Source intermediate CMake configuration&lt;/span&gt;
:
â”œâ”€â”€&lt;span class="w"&gt; &lt;/span&gt;other&lt;span class="w"&gt; &lt;/span&gt;directories&lt;span class="w"&gt; &lt;/span&gt;and&lt;span class="w"&gt; &lt;/span&gt;files
:
â””â”€â”€&lt;span class="w"&gt; &lt;/span&gt;CMakeLists.txt&lt;span class="w"&gt;                  &lt;/span&gt;&lt;span class="c1"&gt;# FOSSology Top-level CMake configuration&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The &lt;code&gt;cmake&lt;/code&gt; directory contains customized CMake modules and templates for FOSSology. This directory is required for all the operations. The general workflow of the new build system as well as how to use it as described below.&lt;/p&gt;
&lt;ol class="arabic"&gt;
&lt;li&gt;&lt;p class="first"&gt;Since the new build system is still in review. You must fork FOSSology and pull the &lt;a class="reference external" href="https://github.com/fossology/fossology/pull/2075"&gt;#2075&lt;/a&gt; pull request branch. Once you are in FOSSology root, run these commands.&lt;/p&gt;
&lt;blockquote&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;git&lt;span class="w"&gt; &lt;/span&gt;fetch&lt;span class="w"&gt; &lt;/span&gt;https://github.com/avinal/fossology&lt;span class="w"&gt; &lt;/span&gt;avinal/feat/buildsystem:buildsystem
git&lt;span class="w"&gt; &lt;/span&gt;checkout&lt;span class="w"&gt; &lt;/span&gt;buildsystem
&lt;/pre&gt;&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;The first step towards building is to create a temporary directory for storing intermediate files and build artifacts. By convention we use a directory named &lt;code&gt;build&lt;/code&gt;, but you can use any name. (&lt;strong&gt;NOTE: For testing do not use other names&lt;/strong&gt;)&lt;/p&gt;
&lt;blockquote&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;mkdir&lt;span class="w"&gt; &lt;/span&gt;build
&lt;span class="nb"&gt;cd&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;build
&lt;/pre&gt;&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;In the next steps, we will configure the CMake project and generate the required configurations. You can use several flags to control the build. Given below are the flags available for this project.&lt;/p&gt;
&lt;blockquote&gt;
&lt;table border="1" class="table table-sm table-hover table-bordered table-responsive docutils"&gt;
&lt;colgroup&gt;
&lt;col width="35%" /&gt;
&lt;col width="44%" /&gt;
&lt;col width="20%" /&gt;
&lt;/colgroup&gt;
&lt;thead valign="bottom"&gt;
&lt;tr&gt;&lt;th class="head"&gt;CMake Flags&lt;/th&gt;
&lt;th class="head"&gt;Description&lt;/th&gt;
&lt;th class="head"&gt;Default&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td&gt;&lt;strong&gt;-DCMAKE_INSTALL_PREFIX=&amp;lt;path&amp;gt;&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Sets the install prefix.&lt;/td&gt;
&lt;td&gt;&lt;code&gt;/usr/local&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;strong&gt;-DAGENTS=&amp;quot;agent1;agent2...&amp;quot;&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Only configure these agents.&lt;/td&gt;
&lt;td&gt;ALL AGENTS&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;strong&gt;-DOFFLINE=&amp;lt;ON/OFF&amp;gt;&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Controls vendor generation, ON=NO&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;OFF&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;p class="first"&gt;&lt;strong&gt;-DCMAKE_BUILD_TYPE=&amp;lt;type&amp;gt;&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote class="last"&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Controls build type aka
level optimisation&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;/td&gt;
&lt;td&gt;&lt;ul class="first last simple"&gt;
&lt;li&gt;&lt;code&gt;Debug&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Release&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;RelWithDebInfo&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;MinSizeRel&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/td&gt;
&lt;td&gt;&lt;code&gt;Debug&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;strong&gt;-DTESTING=&amp;lt;ON/OFF&amp;gt;&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Controls testing config generation&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;OFF&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;strong&gt;-DMONOPACK=&amp;lt;ON/OFF&amp;gt;&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Package adj2nest and ununpack seperately&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;OFF&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;strong&gt;-GNinja&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Use Ninja instead of Unix Makefiles&lt;/td&gt;
&lt;td&gt;&lt;em&gt;Unix MakeFiles&lt;/em&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;There are lots of inbuilt CMake command-line options you can see them in the official &lt;a class="reference external" href="https://cmake.org/cmake/help/v3.10/manual/cmake.1.html"&gt;documentation&lt;/a&gt;. Once you have chosen your flags we can now configure the project using the following commands.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# From build folder&lt;/span&gt;
&lt;span class="nb"&gt;cd&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&amp;lt;name-of-build-directory&amp;gt;
cmake&lt;span class="w"&gt; &lt;/span&gt;&amp;lt;flags&amp;gt;&lt;span class="w"&gt; &lt;/span&gt;..
&lt;/pre&gt;&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;The next step is to build the project. You can use parallel jobs to build faster. For more options you can type &lt;code&gt;cmake --help&lt;/code&gt; or &lt;code&gt;make --help&lt;/code&gt; or &lt;code&gt;ninja --help&lt;/code&gt;.&lt;/p&gt;
&lt;blockquote&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# Common build command for all generators,&lt;/span&gt;
&lt;span class="c1"&gt;# Default number of parallel builds depends on generator used&lt;/span&gt;
cmake&lt;span class="w"&gt; &lt;/span&gt;--build&lt;span class="w"&gt; &lt;/span&gt;.&lt;span class="w"&gt; &lt;/span&gt;--parallel&lt;span class="w"&gt; &lt;/span&gt;&amp;lt;no-of-processes&amp;gt;

&lt;span class="c1"&gt;# For Unix Makefiles, no parallel build by default&lt;/span&gt;
make&lt;span class="w"&gt; &lt;/span&gt;-j&lt;span class="w"&gt; &lt;/span&gt;&amp;lt;no-of-processes&amp;gt;

&lt;span class="c1"&gt;# For Ninja, 8+ parallel build by default (depends on system)&lt;/span&gt;
ninja&lt;span class="w"&gt; &lt;/span&gt;-j&lt;span class="w"&gt; &lt;/span&gt;&amp;lt;no-of-processes&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Installing is also as easy as building. You can choose to install only certain components even if you have built the whole project. If you directly invoke the install command without building the project, it will automatically build the project first.&lt;/p&gt;
&lt;blockquote&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# For Unix Makefiles&lt;/span&gt;
make&lt;span class="w"&gt; &lt;/span&gt;install

&lt;span class="c1"&gt;# For Ninja&lt;/span&gt;
ninja&lt;span class="w"&gt; &lt;/span&gt;install
&lt;/pre&gt;&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;While testing has some issues, but most of the testing is working fine. For now, you must build and run any test from the FOSSology root directory only. You can choose to configure a single agent if you want to test one agent only. See &lt;code&gt;ctest --help&lt;/code&gt; for controlling test runs.&lt;/p&gt;
&lt;blockquote&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# Common testing command&lt;/span&gt;
ctest&lt;span class="w"&gt; &lt;/span&gt;--parallel&lt;span class="w"&gt; &lt;/span&gt;&amp;lt;no-of-processes&amp;gt;

&lt;span class="c1"&gt;# For Unix Makefiles&lt;/span&gt;
make&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;test&lt;/span&gt;

&lt;span class="c1"&gt;# For Ninja&lt;/span&gt;
ninja&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;test&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;You can package FOSSology, the packaging currently lacks copyright and conf files. But for testing purposes, you can use the following commands. Similar to installing, if you run the package command without building the project, it will automatically build the project first. See &lt;code&gt;cpack --help&lt;/code&gt; for more packaging options.&lt;/p&gt;
&lt;blockquote&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# Common testing command&lt;/span&gt;
cpack

&lt;span class="c1"&gt;# For Unix Makefiles&lt;/span&gt;
make&lt;span class="w"&gt; &lt;/span&gt;package

&lt;span class="c1"&gt;# For Ninja&lt;/span&gt;
ninja&lt;span class="w"&gt; &lt;/span&gt;package
&lt;/pre&gt;&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class="section" id="known-issues-and-drawbacks"&gt;
&lt;h2&gt;Known Issues and Drawbacks&lt;/h2&gt;
&lt;p&gt;Although the transition from Makefiles to CMake and Travis CI to GitHub Actions is almost complete and working as expected. But it is not free of drawbacks and issues. This section outlines the known issues at the time of writing.&lt;/p&gt;
&lt;img alt="A Bug Meme" class="float-md-right rounded border border-info ml-3" src="https://imgs.xkcd.com/comics/conference_question.png" style="width: 350px;" /&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Coverage builds may fail with linking errors.&lt;/li&gt;
&lt;li&gt;Packaging prefix is the same as the install prefix. This requires the developer to set the install prefix manually before packaging to produce packages with the correct directory structure.&lt;/li&gt;
&lt;li&gt;Testing and packaging must be used from the FOSSology root directory. Not doing so may or may not configure the project as intended.&lt;/li&gt;
&lt;li&gt;Previously tests were written hardcoded for the Makefiles. But new build system requires all artifacts to be generated in a separate directory. This required me to add symbolic links wherever a generated script or file is expected. Tests can still leave some artifacts inside source folders.&lt;/li&gt;
&lt;li&gt;There is no easy way to install a particular agent from the FOSSology root directory.&lt;/li&gt;
&lt;li&gt;Packages don't contain copyright, readme, and license files. CMake doesn't provide a way to include these files. This is being tracked by issue &lt;a class="reference external" href="https://gitlab.kitware.com/cmake/cmake/-/issues/21832"&gt;#21832&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;While packaging the symbolic links may or may not be dereferenced and hence results in copying the folder too in the target directory.&lt;/li&gt;
&lt;li&gt;Running tests locally may require switching to &lt;code&gt;fossy&lt;/code&gt; user.&lt;/li&gt;
&lt;li&gt;While configured for testing, it may give permission errors.&lt;/li&gt;
&lt;li&gt;Scheduler, Ununpack, and Delagent unit and functional tests are not working. I have added an issue &lt;a class="reference external" href="https://github.com/fossology/fossology/issues/2084"&gt;#2084&lt;/a&gt; to track the progress on fixing these tests.&lt;/li&gt;
&lt;li&gt;CMake doesn't generates uninstall targets. The closest thing to uninstall is &lt;a class="reference external" href="https://gitlab.kitware.com/cmake/community/-/wikis/FAQ#can-i-do-make-uninstall-with-cmake"&gt;this snippet&lt;/a&gt;. This will be later added to the FOSSology.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="challenges-faced"&gt;
&lt;h2&gt;Challenges Faced&lt;/h2&gt;
&lt;p&gt;While this whole project was challenging, some aspects of it were unforeseen and more challenging. When I decided to go on with this project I just had enough CMake knowledge to write a configuration for a very small project. I had never used CMake on this big scale. On the other side, the FOSSology community is largely unknown to CMake so for all of us it was learn, practice, and implement. With support from mentors, I was able to overcome this challenge with flying colors.&lt;/p&gt;
&lt;p&gt;The other challenge was to understand the old build system, how they are all connected and what is the flow. The complexity can be imagined by the fact that the most of code and configurations were written in the decade before the last decade and haven't changed much since then.&lt;/p&gt;
&lt;p&gt;The most challenging task was to make tests work with the new build system. Since tests were mostly hardcoded and the new build system refactored many of the files and directory, the tests were failing initially. The testing part took me the most time. All thanks to my mentor Gaurav I was able to hack them to suit the new build system.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="related-resources-and-links"&gt;
&lt;h2&gt;Related Resources and Links&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Fix FOSSology agent tests issue &lt;a class="reference external" href="https://github.com/fossology/fossology/issues/2084"&gt;#2084&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;feat(CI): Migrate API docs generation and deployment to GitHub Actions pull request &lt;a class="reference external" href="https://github.com/fossology/fossology/pull/1917"&gt;#1917&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;feat(CI): Migrate Static Checks and Analysis to GitHub Actions from Travis CI &lt;a class="reference external" href="https://github.com/fossology/fossology/pull/1919"&gt;#1919&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="future-development-plans"&gt;
&lt;h2&gt;Future Development Plans&lt;/h2&gt;
&lt;p&gt;There is a lot to do with the new build system and CI and it will probably take a year or to reach a maturity point. I was able to meet most of the goals but some of them are remaining.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Fix the tests, probably renovate them from the ground up.&lt;/li&gt;
&lt;li&gt;Find a hack for packaging problems.&lt;/li&gt;
&lt;li&gt;Improve and optimize the build.&lt;/li&gt;
&lt;li&gt;Modernise the source code, remove old, bloated code and replace them according to new standards.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="what-did-i-learn-from-this-project"&gt;
&lt;h2&gt;What did I learn from this project?&lt;/h2&gt;
&lt;p&gt;This Google Summer of Code was the busiest time of my life for all good reasons. I learned a lot about license compliance and how it all works in the software industry. The next big thing is CMake. As I mentioned I was just a novice user of CMake. Now I am confident that given any other large project I will be able to migrate it/improve it. I got to learn PHP, of which I did not know a single word before GSoC. And finally, I learned about packing and testing. I had these courses but implementing them myself and fixing them was a wholesome experience.&lt;/p&gt;
&lt;p&gt;Other than that I improved on my communication and presentation skills. Collaborating with fellow participants was one of the great things that happened during GSoC.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="acknowledgments"&gt;
&lt;h2&gt;Acknowledgments&lt;/h2&gt;
&lt;p&gt;Google Summer of Code is the best thing that has happened to me this year so far. Although there are numerous people to say thanks to, I want to mention key people who were my motivation and support during this period.&lt;/p&gt;
&lt;p&gt;First of all, I want to thank and appreciate my mentors &lt;a class="reference external" href="https://github.com/GMishx"&gt;Gaurav Mishra&lt;/a&gt;, &lt;a class="reference external" href="https://github.com/mcjaeger"&gt;Michael C. Jaeger&lt;/a&gt;, &lt;a class="reference external" href="https://github.com/ag4ums"&gt;Anupam Ghosh&lt;/a&gt;, and &lt;a class="reference external" href="https://github.com/shaheemazmalmmd"&gt;Shaheem Azmal M MD&lt;/a&gt;. Without the help and support from them, all this would not have been possible. They are very polite, knowledgeable, and helpful.&lt;/p&gt;
&lt;p&gt;Finally, I want to thanks, my family and friends. I got to meet many awesome developers as my fellow participants from around the world, I wish we will do more collaboration in the future.&lt;/p&gt;
&lt;/div&gt;
</content><category term="report"></category><category term="gsoc"></category><category term="FOSSology"></category></entry><entry><title>Coding Week 10 Meeting</title><link href="https://gsoc.avinal.space/posts/report/meeting-11.html" rel="alternate"></link><published>2021-08-14T22:47:00+05:30</published><updated>2021-08-14T22:47:00+05:30</updated><author><name>Avinal Kumar</name></author><id>tag:gsoc.avinal.space,2021-08-14:/posts/report/meeting-11.html</id><summary type="html">&lt;p class="first last"&gt;This week I implemented CMake testing configuration and fixed most of the tests. As of now all but 5 tests are working fine.&lt;/p&gt;
</summary><content type="html">&lt;div class="alert alert-info" role="alert"&gt;This week I implemented CMake testing configuration and fixed most of the tests. As of now all but 5 tests are working fine.&lt;/div&gt;&lt;div class="section" id="attendees"&gt;
&lt;h2&gt;Attendees&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/mcjaeger"&gt;Michael C. Jaeger&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/ag4ums"&gt;Anupam Ghosh&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/avinal"&gt;Avinal Kumar&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="week-9-progress"&gt;
&lt;h2&gt;Week 9 Progress&lt;/h2&gt;
&lt;div class="alert alert-success" role="alert"&gt;
&lt;ul&gt;&lt;li&gt;Testing configuration for all agents added&lt;/li&gt;
&lt;li&gt;GitHub Actions Configuration added&lt;/li&gt;
&lt;li&gt;Fixed and refactored most of the tests&lt;/li&gt;
&lt;li&gt;Raised a pull request for all the works till now. &lt;a href="https://github.com/fossology/fossology/pull/2075"&gt;#2075&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;To test the current progress, follow the instructions &lt;a href="https://github.com/avinal/FOSSology/wiki#test-the-new-system-only-gcc-with-make-and-ninja-tested-for-now"&gt;here&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;div class="section" id="discussions"&gt;
&lt;h2&gt;Discussions&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;strong&gt;I suspect that the Ojo regression test's expected data file is outdated&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;Michael said that on their internal Jenkins CI, these tests are not being run currently, so this might be possible that the file is outdated.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Since some of the tests need Makefile to install while testing, CMake generated Makefiles and test Makefiles are conflicting, and hence we are forced to use Ninja for testing. What can I do about it?&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;Michael suggested using &lt;code&gt;--file=filename&lt;/code&gt; flag with the make command and change the name of the test Makefile to something else. This will solve the problem.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Mimetype is detecting executables as shared lib, is that expected or needs to be fixed?&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;Mimetype internally depends on the &lt;em&gt;file&lt;/em&gt; command to get the mime-type. If the output of the &lt;em&gt;file&lt;/em&gt; command is also the same then it is okay.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;What is&lt;/strong&gt; &lt;code&gt;folderlist&lt;/code&gt; &lt;strong&gt;in https://github.com/fossology/fossology/blob/master/src/delagent/agent_tests/Functional/ft_cliDelagentTest.php#L126 ?&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;folderlist&lt;/code&gt; is a view. Use &lt;code&gt;createViews()&lt;/code&gt; function.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Suggestions/Changes from Gaurav for fixing phpunit tests.&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;Please note the changes in &lt;code&gt;setUp()&lt;/code&gt; function in &lt;code&gt;src/lib/php/tests/test_common_license_file.php&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;The test database name is given to the constructor of TestPgDb and can be anything as it gets deleted in &lt;code&gt;teardown()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;dbmanager&lt;/code&gt; is provided by the object, no need to initialize global &lt;code&gt;PG_CONN&lt;/code&gt; (it will be exposed by the library in case some of the functions need it).&lt;/li&gt;
&lt;li&gt;All the tables needs to be explicitly mentioned to &lt;code&gt;createPlainTables()&lt;/code&gt; and their corresponding &lt;code&gt;createSequences()&lt;/code&gt; (you can get them using &lt;code&gt;\d tablename&lt;/code&gt; from existing DB easily. Then call the &lt;code&gt;alterTables()&lt;/code&gt; to update the sequence. (I am not sure if &lt;code&gt;createConstraints()&lt;/code&gt; is required at all, try to remove)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;tearDown()&lt;/code&gt; is pretty easy, just need to call &lt;code&gt;fullDestruct()&lt;/code&gt;. For debugging, you can add &lt;code&gt;exit(-1);&lt;/code&gt; after any line you as suspecting, connect to DB and checkout the database, select/inspect tables.&lt;/li&gt;
&lt;li&gt;There is also &lt;code&gt;TestInstaller&lt;/code&gt; class in case any of test case needs the whole mods-enabled with fossology.conf, VERSION, etc. Please check &lt;code&gt;src/cli/tests/test_fo_copyright_list.php&lt;/code&gt; for quick reference.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="conclusion-and-further-plans"&gt;
&lt;h2&gt;Conclusion and Further Plans&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Fix the remaining tests.&lt;/li&gt;
&lt;li&gt;Add week 8, 9 reports.&lt;/li&gt;
&lt;li&gt;Add Final Evaluation Report.&lt;/li&gt;
&lt;li&gt;Complete Final Evaluation.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</content><category term="report"></category><category term="gsoc"></category><category term="FOSSology"></category></entry><entry><title>Coding Week 9 Meeting</title><link href="https://gsoc.avinal.space/posts/report/meeting-10.html" rel="alternate"></link><published>2021-08-06T22:47:00+05:30</published><updated>2021-08-06T22:47:00+05:30</updated><author><name>Avinal Kumar</name></author><id>tag:gsoc.avinal.space,2021-08-06:/posts/report/meeting-10.html</id><summary type="html">&lt;p class="first last"&gt;This week I worked on CMake testing configuration. Most of the time was spent understanding the previous testing architecture.&lt;/p&gt;
</summary><content type="html">&lt;div class="alert alert-info" role="alert"&gt;This week I worked on CMake testing configuration. Most of the time was spent understanding the previous testing architecture.&lt;/div&gt;&lt;div class="section" id="attendees"&gt;
&lt;h2&gt;Attendees&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/GMishx"&gt;Gaurav Mishra&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/ag4ums"&gt;Anupam Ghosh&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/avinal"&gt;Avinal Kumar&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="week-9-progress"&gt;
&lt;h2&gt;Week 9 Progress&lt;/h2&gt;
&lt;div class="alert alert-success" role="alert"&gt;
&lt;ul&gt;&lt;li&gt;Initial CMake testing configuration added.&lt;/li&gt;
&lt;li&gt;Few tests working, e.g copyright, nomos&lt;/li&gt;
&lt;li&gt;Improved packaging configurations&lt;/li&gt;
&lt;li&gt;To test the current progress, follow the instructions &lt;a href="https://github.com/avinal/FOSSology/wiki#test-the-new-system-only-gcc-with-make-and-ninja-tested-for-now"&gt;here&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;div class="section" id="discussions"&gt;
&lt;h2&gt;Discussions&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p class="first"&gt;&lt;strong&gt;Is this a necessity that tests must be run as the fossy user? Because when I run tests as me they as for permissions. But proceeds as the fossy user.&lt;/strong&gt;&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;No this is not required and this should not happen. They run under fossy as they sometimes require writing into /srv/fossology. But if they can run under other users that is an enhancement.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;&lt;strong&gt;I am getting a lot of install issues in C/C++ agent tests?&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Start&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;3&lt;/span&gt;:&lt;span class="w"&gt; &lt;/span&gt;delagent_unit_test

&lt;span class="m"&gt;3&lt;/span&gt;:&lt;span class="w"&gt; &lt;/span&gt;Test&lt;span class="w"&gt; &lt;/span&gt;command:&lt;span class="w"&gt; &lt;/span&gt;/home/avinal/Documents/my_git/fossology/build/src/delagent/agent_tests/test_delagent
&lt;span class="m"&gt;3&lt;/span&gt;:&lt;span class="w"&gt; &lt;/span&gt;Test&lt;span class="w"&gt; &lt;/span&gt;timeout&lt;span class="w"&gt; &lt;/span&gt;computed&lt;span class="w"&gt; &lt;/span&gt;to&lt;span class="w"&gt; &lt;/span&gt;be:&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;10000000&lt;/span&gt;
&lt;span class="m"&gt;3&lt;/span&gt;:&lt;span class="w"&gt; &lt;/span&gt;install:&lt;span class="w"&gt; &lt;/span&gt;cannot&lt;span class="w"&gt; &lt;/span&gt;stat&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;/home/avinal/Documents/my_git/fossology/build/src/delagent/agent_tests/..//../../install/defconf/Db.conf&amp;#39;&lt;/span&gt;:&lt;span class="w"&gt; &lt;/span&gt;No&lt;span class="w"&gt; &lt;/span&gt;such&lt;span class="w"&gt; &lt;/span&gt;file&lt;span class="w"&gt; &lt;/span&gt;or&lt;span class="w"&gt; &lt;/span&gt;directory
&lt;span class="m"&gt;3&lt;/span&gt;:&lt;span class="w"&gt; &lt;/span&gt;install:&lt;span class="w"&gt; &lt;/span&gt;cannot&lt;span class="w"&gt; &lt;/span&gt;stat&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;/home/avinal/Documents/my_git/fossology/build/src/delagent/agent_tests/..//VERSION&amp;#39;&lt;/span&gt;:&lt;span class="w"&gt; &lt;/span&gt;No&lt;span class="w"&gt; &lt;/span&gt;such&lt;span class="w"&gt; &lt;/span&gt;file&lt;span class="w"&gt; &lt;/span&gt;or&lt;span class="w"&gt; &lt;/span&gt;directory
&lt;span class="m"&gt;3&lt;/span&gt;:&lt;span class="w"&gt; &lt;/span&gt;sh:&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;:&lt;span class="w"&gt; &lt;/span&gt;../../../testing/db/createTestDB.php:&lt;span class="w"&gt; &lt;/span&gt;not&lt;span class="w"&gt; &lt;/span&gt;found
&lt;span class="m"&gt;3&lt;/span&gt;:&lt;span class="w"&gt; &lt;/span&gt;Failed&lt;span class="w"&gt; &lt;/span&gt;to&lt;span class="w"&gt; &lt;/span&gt;run&lt;span class="w"&gt; &lt;/span&gt;../../../testing/db/createTestDB.php&lt;span class="w"&gt; &lt;/span&gt;-c&lt;span class="w"&gt; &lt;/span&gt;/home/avinal/Documents/my_git/fossologbuild/src/delagent/agent_tests/testconf&lt;span class="w"&gt; &lt;/span&gt;-e,&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;exit&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;code&lt;span class="w"&gt; &lt;/span&gt;is:127&lt;span class="w"&gt; &lt;/span&gt;.
&lt;span class="m"&gt;3&lt;/span&gt;/8&lt;span class="w"&gt; &lt;/span&gt;Test&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="c1"&gt;#3: delagent_unit_test ...............***Failed    0.02 sec&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Not sure about the reason. I was suspecting Makefile but since they are gone now, I think PHP files are calling some shell commands causing this.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;&lt;strong&gt;Suggestions/Changes from Gaurav for fixing tests.&lt;/strong&gt;&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;For clib-tests, it needs to be called from PHP file (via PHPUnit) as it requires setting up a dummy repo. Check the &lt;code&gt;src/lib/c/test/Makefile&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;For missing services.xml, the test cases include &lt;code&gt;src/lib/php/common-container.php&lt;/code&gt; which loads the file. It expects it to be in current dir. Can be solved in two ways&lt;ul&gt;
&lt;li&gt;Create another common-container.php just for test cases with correct paths.&lt;/li&gt;
&lt;li&gt;Edit the current file and take the help of environment variables. For example, if a test variable is exported in env, find the XML relative to it otherwise continue as normal and this variable can be exported by CMake during the test.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Scheduler tests do need &lt;code&gt;fossology_testconfig&lt;/code&gt; from Makefile.deps which set up the srv and create test configurations, DB, etc.&lt;ul&gt;
&lt;li&gt;Another shell script can be written to do all that and call it from CMake. The PHP file called makes everything required in /tmp so not an issue.&lt;/li&gt;
&lt;li&gt;The locations like &lt;code&gt;LOG_DIR, FOSSDB_CONF&lt;/code&gt;, etc. in CMakeLists.txt can be changed to some other values. I am guessing this is the reason you were asked for the fossy password.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;File &lt;code&gt;src/copyright/agent_tests/Functional/cli_test.sh&lt;/code&gt; needs to be edited to take paths relative to build dir. It can also be made into a .in file which is generated from CMake? So every path can easily be updated.&lt;/li&gt;
&lt;li&gt;For PHP agents with missing version.php issue, there is a hack possible&lt;ul&gt;
&lt;li&gt;Check &lt;a class="reference external" href="https://www.php.net/manual/en/function.set-include-path.php"&gt;https://www.php.net/manual/en/function.set-include-path.php&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Another hack will be to use soft links for version.php in the source.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Other PHP issues like &lt;code&gt;PHP Fatal error: Uncaught Error: Class 'Fossology\Lib\Agent\Agent' not found&lt;/code&gt; can only be solved by editing composer.json before doing composer install (look for autoload: psr-4 ).&lt;/li&gt;
&lt;li&gt;For delagent, pkgagent, mimetype issues, something can be done here: &lt;a class="reference external" href="https://github.com/avinal/fossology/blob/avinal/feat/testing/src/testing/db/c/libfodbreposysconf.c#L349"&gt;https://github.com/avinal/fossology/blob/avinal/feat/testing/src/testing/db/c/libfodbreposysconf.c#L349&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="conclusion-and-further-plans"&gt;
&lt;h2&gt;Conclusion and Further Plans&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Raise a pull request for all the progress till now.&lt;/li&gt;
&lt;li&gt;Refactor the test source code according to suggestions.&lt;/li&gt;
&lt;li&gt;Implement remaining testing configurations.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</content><category term="report"></category><category term="gsoc"></category><category term="FOSSology"></category></entry><entry><title>Coding Week 8 Meeting</title><link href="https://gsoc.avinal.space/posts/report/meeting-9.html" rel="alternate"></link><published>2021-07-30T22:47:00+05:30</published><updated>2021-07-30T22:47:00+05:30</updated><author><name>Avinal Kumar</name></author><id>tag:gsoc.avinal.space,2021-07-30:/posts/report/meeting-9.html</id><summary type="html">&lt;p class="first last"&gt;This week I implemented CMake packaging configuration for FOSSology. The new configuration fixes issue with previous packaging configurations. It also retains the component wise installation features.&lt;/p&gt;
</summary><content type="html">&lt;div class="alert alert-info" role="alert"&gt;This week I implemented CMake packaging configuration for FOSSology. The new configuration fixes issue with previous packaging configurations. It also retains the component wise installation features. &lt;/div&gt;&lt;div class="section" id="attendees"&gt;
&lt;h2&gt;Attendees&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/GMishx"&gt;Gaurav Mishra&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/shaheemazmalmmd"&gt;Shaheem Azmal M MD&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/avinal"&gt;Avinal Kumar&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="week-8-progress"&gt;
&lt;h2&gt;Week 8 Progress&lt;/h2&gt;
&lt;div class="alert alert-success" role="alert"&gt;
&lt;ul&gt;&lt;li&gt;CMake Packaging configuration almost completed.&lt;/li&gt;
&lt;li&gt;Packages can be built according to the FOSSology previous packaging structure.&lt;/li&gt;
&lt;li&gt;Initial testing configuration added.&lt;/li&gt;
&lt;li&gt;Ninja build has been fixed.&lt;/li&gt;
&lt;li&gt;To test the current progress, follow the instructions &lt;a href="https://github.com/avinal/FOSSology/wiki#test-the-new-system-only-gcc-with-make-and-ninja-tested-for-now"&gt;here&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;div class="section" id="discussions"&gt;
&lt;h2&gt;Discussions&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;strong&gt;How is the testing implemented in FOSSology?&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;Not all agents have testing implemented.&lt;/li&gt;
&lt;li&gt;There are two types of tests &lt;em&gt;Unit&lt;/em&gt; and &lt;em&gt;Functional&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;At first, the test executable calls multiple PHP scripts to create a test environment. And then tests are executed.&lt;/li&gt;
&lt;li&gt;Files related to testing and common for all the agents are in &lt;code&gt;src/testing&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Other tests depends on &lt;code&gt;phpunit&lt;/code&gt;. This &lt;em&gt;PHPUnit&lt;/em&gt; is generated inside &lt;code&gt;vendor&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;As of now, the testing configurations are hardcoded, what should I do, because it seems the testing configuration will require changes to a lot of files?&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;Decide a deadline for the testing configuration and if until that point there is not very productive implementation then move to the next task that is implementing CI.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;As of now building, installation, and packaging via CMake is working and in a stable state. To create an initial Pull Request. This would also be useful in case of the final evaluation and further testing will be based on this PR itself.&lt;/li&gt;
&lt;li&gt;Fix any bugs or if there is the scope of improvement in Building, Installation and Packaging do that.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="conclusion-and-further-plans"&gt;
&lt;h2&gt;Conclusion and Further Plans&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Prepare for an initial PR.&lt;/li&gt;
&lt;li&gt;Fix known bugs and apply Improvements.&lt;/li&gt;
&lt;li&gt;Work on testing configurations.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</content><category term="report"></category><category term="gsoc"></category><category term="FOSSology"></category></entry><entry><title>Coding Week 7 Meeting</title><link href="https://gsoc.avinal.space/posts/report/meeting-8.html" rel="alternate"></link><published>2021-07-23T22:22:00+05:30</published><updated>2021-07-23T22:22:00+05:30</updated><author><name>Avinal Kumar</name></author><id>tag:gsoc.avinal.space,2021-07-23:/posts/report/meeting-8.html</id><summary type="html">&lt;p class="first last"&gt;This week I implemented CMake packaging configuration for FOSSology. There were two meetings in this week and this report covers both of them.&lt;/p&gt;
</summary><content type="html">&lt;div class="alert alert-info" role="alert"&gt;This week I implemented CMake packaging configuration for FOSSology. There were two meetings in this week and this report covers both of them.   &lt;/div&gt;&lt;div class="section" id="attendees"&gt;
&lt;h2&gt;Attendees&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/mcjaeger"&gt;Michael C. Jaeger&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/GMishx"&gt;Gaurav Mishra&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/ag4ums"&gt;Anupam Ghosh&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/shaheemazmalmmd"&gt;Shaheem Azmal M MD&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/avinal"&gt;Avinal Kumar&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="week-7-progress"&gt;
&lt;h2&gt;Week 7 Progress&lt;/h2&gt;
&lt;div class="alert alert-success" role="alert"&gt;
&lt;ul&gt;&lt;li&gt;Initial CMake packaging configuration implemented.&lt;/li&gt;
&lt;li&gt;Packages can be built according to the FOSSology previous packaging structure.&lt;/li&gt;
&lt;li&gt;Copyright, ecc and keyword now builds faster.&lt;/li&gt;
&lt;li&gt;To test the current progress, follow the instructions &lt;a href="https://github.com/avinal/FOSSology/wiki#test-the-new-system-only-gcc-with-make-and-ninja-tested-for-now"&gt;here&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;div class="section" id="discussions"&gt;
&lt;h2&gt;Discussions&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;strong&gt;Where I can find packaging info for FOSSology?&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;All the scripts and companion files are located inside &lt;code&gt;debian&lt;/code&gt; folder.&lt;/li&gt;
&lt;li&gt;The most important files are &lt;code&gt;control&lt;/code&gt;, which contains the dependency and description of each package, and &lt;code&gt;rules&lt;/code&gt; file, which contains the make commands for creating the packages.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;What are&lt;/strong&gt; &lt;code&gt;${shlibs:Depends}&lt;/code&gt; &lt;strong&gt;and&lt;/strong&gt; &lt;code&gt;${misc:Depends}&lt;/code&gt; ?&lt;ul&gt;
&lt;li&gt;They are dependencies required for creating Debian packages. CMake should be adding them by default so we can safely ignore them.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Will the new packages have the same structure as the old ones?&lt;/strong&gt; &lt;em&gt;(Michael)&lt;/em&gt;&lt;ul&gt;
&lt;li&gt;Yes for compatibility purposes Gaurav has suggested exactly follow the same structure as the old one.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Copyright build is slow because the same object files are being compiled three times, can you improve that?&lt;/strong&gt; &lt;em&gt;(Gaurav)&lt;/em&gt;&lt;ul&gt;
&lt;li&gt;I can try compiling the common object files beforehand and then adding the executables. But how to know the common object files?&lt;/li&gt;
&lt;li&gt;Gaurav showed me where in the Makefiles I can find the common object files.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;There are problems with copying the symbolic link and packaging them. So I have to find some alternatives to resolve that.&lt;/li&gt;
&lt;li&gt;With component installing, package description can no longer be set.&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;fossology-common&lt;/code&gt; package contains file from &lt;code&gt;fossology-db&lt;/code&gt; package. And the &lt;code&gt;fossology-db&lt;/code&gt; package is empty.&lt;ul&gt;
&lt;li&gt;Gaurav said this was unexpected and should not happen. This seems to be a very old bug with packaging.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="conclusion-and-further-plans"&gt;
&lt;h2&gt;Conclusion and Further Plans&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Work more on the packaging.&lt;/li&gt;
&lt;li&gt;Improve compilation of copyright and monk agents&lt;/li&gt;
&lt;li&gt;Try to solve the packaging bug and add a pull request for that.&lt;/li&gt;
&lt;li&gt;Move on to implementing testing configurations.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</content><category term="report"></category><category term="gsoc"></category><category term="FOSSology"></category></entry><entry><title>First Evaluation Report</title><link href="https://gsoc.avinal.space/posts/report/first-evaluation.html" rel="alternate"></link><published>2021-07-14T12:29:00+05:30</published><updated>2021-07-14T12:29:00+05:30</updated><author><name>Avinal Kumar</name></author><id>tag:gsoc.avinal.space,2021-07-14:/posts/report/first-evaluation.html</id><summary type="html">&lt;p class="first last"&gt;In the first phase of GSoC 2021 &amp;#64; The FOSSology Project, I have completed the desired milestone. As of now, FOSSology can be installed completely via CMake and most of the components are working fine in initial testing.&lt;/p&gt;
</summary><content type="html">&lt;div class="section" id="updates"&gt;
&lt;h2&gt;Updates&lt;/h2&gt;
&lt;p&gt;In the first phase of GSoC 2021 &amp;#64; The FOSSology Project, I have completed the desired milestone. As of now, FOSSology can be installed completely via CMake and most of the components are working fine in initial testing.&lt;/p&gt;
&lt;p&gt;List of tasks completed&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Added CMake build configurations for all the C/C++ agents for executables, libraries, and coverages&lt;/li&gt;
&lt;li&gt;Added CMake install configuration for all C/C++ and PHP agents as well as extra components&lt;/li&gt;
&lt;li&gt;Reworked the shell scripts and generated source files to make them more compatible with CMake as well as better in terms of overall compatibility with the latest tools.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="improvements"&gt;
&lt;h2&gt;Improvements&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;The new CMake build architecture is much more flexible to changes as compared to hard-coded Makefiles.&lt;/li&gt;
&lt;li&gt;CMake generated configurations support parallel build by default, this has led to significant improvement in build time. CMake generated configuration can now build the whole project within 2 mins or even faster on more powerful CPUs (Both Ninja and Makefiles with the same number of parallel processes) compared to 4-5 minutes previously. &lt;em&gt;(These results are averaged from initial testing of new build architecture)&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;CMake supports out-source builds by default, which means the source folders are not touched/modified while building, all build files and residuals get their separate folder and the source tree can be cleaned easily.&lt;/li&gt;
&lt;li&gt;Developers can now opt for a long list of generators to build FOSSology e.g Makefiles, Ninja as per their needs.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="how-to-test"&gt;
&lt;h2&gt;How to test&lt;/h2&gt;
&lt;p&gt;Instructions to test the new Build system is in &lt;a class="reference external" href="https://github.com/avinal/fossology/wiki#test-the-new-system-only-gcc-with-make-and-ninja-tested-for-now"&gt;this&lt;/a&gt; wiki.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="known-issues"&gt;
&lt;h2&gt;Known Issues&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;There may be a permission issue with some generated sources while building. This can be bypassed for now by running &lt;code&gt;sudo chmod +x &amp;lt;filename&amp;gt;&lt;/code&gt; command.&lt;/li&gt;
&lt;li&gt;Coverage builds may fail.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="postponed-tasks"&gt;
&lt;h2&gt;Postponed Tasks&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;configuration for tests are skipped for now&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="work-in-progress"&gt;
&lt;h2&gt;Work in Progress&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Currently, I am working on packaging the FOSSology with CMake.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</content><category term="report"></category><category term="gsoc"></category><category term="FOSSology"></category></entry><entry><title>Coding Week 5 Meeting</title><link href="https://gsoc.avinal.space/posts/report/meeting-7.html" rel="alternate"></link><published>2021-07-09T22:22:00+05:30</published><updated>2021-07-09T22:22:00+05:30</updated><author><name>Avinal Kumar</name></author><id>tag:gsoc.avinal.space,2021-07-09:/posts/report/meeting-7.html</id><summary type="html">&lt;p class="first last"&gt;This week was dedicated to perfecting CMake Installation Configuration. The installation was tested and bugs were discussed.&lt;/p&gt;
</summary><content type="html">&lt;div class="alert alert-info" role="alert"&gt;This week was dedicated to perfecting CMake Installation Configuration. The installation was tested and bugs were discussed. &lt;/div&gt;&lt;div class="section" id="attendees"&gt;
&lt;h2&gt;Attendees&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/GMishx"&gt;Gaurav Mishra&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/avinal"&gt;Avinal Kumar&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="week-5-progress"&gt;
&lt;h2&gt;Week 5 Progress&lt;/h2&gt;
&lt;div class="alert alert-success" role="alert"&gt;
&lt;ul&gt;&lt;li&gt;CMake Installation Configuration is almost complete.&lt;/li&gt;
&lt;li&gt;FOSSology can be installed completely via CMake&lt;/li&gt;
&lt;li&gt;Post install script generation also added&lt;/li&gt;
&lt;li&gt;To test the current progress, follow the instructions &lt;a href="https://github.com/avinal/FOSSology/wiki#test-the-new-system-only-gcc-with-make-and-ninja-tested-for-now"&gt;here&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;div class="section" id="discussions"&gt;
&lt;h2&gt;Discussions&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;There are permission problems while running bash script of &lt;code&gt;nomos&lt;/code&gt;, &lt;code&gt;monk&lt;/code&gt; and &lt;code&gt;genvendor&lt;/code&gt;.&lt;ul&gt;
&lt;li&gt;One possible fix can be to add &lt;code&gt;bash&lt;/code&gt; before each bash scripts.&lt;/li&gt;
&lt;li&gt;The other fix is to modify shebang line in each script from &lt;code&gt;#!/bin/sh&lt;/code&gt; to &lt;code&gt;#!/bin/bash&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;In copyright agent same files are being compiled thrice, this is slowing down the build.&lt;ul&gt;
&lt;li&gt;I am working on it. The problem is occurring because of three different executables.&lt;/li&gt;
&lt;li&gt;I will try to combine the common objects together.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;There are some redundant files in the installation. And VERSION file is missing in &lt;code&gt;/usr/local/share/fossology&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="conclusion-and-further-plans"&gt;
&lt;h2&gt;Conclusion and Further Plans&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Fix copyright build.&lt;/li&gt;
&lt;li&gt;Remove redundant files and folders.&lt;/li&gt;
&lt;li&gt;Fix permission issues.&lt;/li&gt;
&lt;li&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</content><category term="report"></category><category term="gsoc"></category><category term="FOSSology"></category></entry><entry><title>Coding Week 4 Meeting-2</title><link href="https://gsoc.avinal.space/posts/report/meeting-6.html" rel="alternate"></link><published>2021-07-02T22:22:00+05:30</published><updated>2021-07-02T22:22:00+05:30</updated><author><name>Avinal Kumar</name></author><id>tag:gsoc.avinal.space,2021-07-02:/posts/report/meeting-6.html</id><summary type="html">&lt;p class="first last"&gt;In this eighth meeting questions related to post install generation were asked. This was a short meeting.&lt;/p&gt;
</summary><content type="html">&lt;div class="alert alert-info" role="alert"&gt;In this eighth meeting questions related to post install generation were asked. This was a short meeting.  &lt;/div&gt;&lt;div class="section" id="attendees"&gt;
&lt;h2&gt;Attendees&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/GMishx"&gt;Gaurav Mishra&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/avinal"&gt;Avinal Kumar&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="week-4-progress"&gt;
&lt;h2&gt;Week 4 Progress&lt;/h2&gt;
&lt;div class="alert alert-success" role="alert"&gt;
&lt;ul&gt;&lt;li&gt;Version parsing logic implemented.&lt;/li&gt;
&lt;li&gt;VERSION and COMMIT_HASH added to every executables.&lt;/li&gt;
&lt;li&gt;Installing part is complete except &lt;code&gt;cli&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Symbolic Links are installing and working fine.&lt;/li&gt;
&lt;li&gt;Version, Symbolic Links, &lt;code&gt;VERSION&lt;/code&gt; file generation, &lt;code&gt;version.php&lt;/code&gt; generation are now more modular and called via a single function for each agent&lt;/li&gt;
&lt;li&gt;Most dependencies are now moved to single configuration file.&lt;/li&gt;
&lt;li&gt;Vendor directory generation and installing are now working.&lt;/li&gt;
&lt;li&gt;To test the current progress, follow the instructions &lt;a href="https://github.com/avinal/FOSSology/wiki#test-the-new-system-only-gcc-with-make-and-ninja-tested-for-now"&gt;here&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;div class="section" id="discussions"&gt;
&lt;h2&gt;Discussions&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;strong&gt;Why all the symbolic links in cli points to&lt;/strong&gt; &lt;code&gt;fo_wrapper&lt;/code&gt; &lt;strong&gt;script?&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;The &lt;code&gt;fo_wrapper&lt;/code&gt; script calls the PHP script on the symbolic link that called the fo_wrapper. It also initializes any requirement before calling the scripts.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;How to generate all the other configuration in&lt;/strong&gt; &lt;code&gt;/usr/local/etc/fossology&lt;/code&gt; &lt;strong&gt;directory?&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;You can find the input files for all these configurations in the &lt;code&gt;install/defcon&lt;/code&gt; directory.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;What are&lt;/strong&gt; &lt;code&gt;OBSOLETEFILES&lt;/code&gt; &lt;strong&gt;in&lt;/strong&gt; &lt;code&gt;www/ui/Makefile&lt;/code&gt; &lt;strong&gt;?&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;They are kept for compatibility purposes. Although they have been removed in the current versions of FOSSology, if a user installs a new version on top of an older instance, then we should explicitly remove those files.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;I have created a separate folder for generating vendor directory. Is that okay?&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;Yeah, it should be fine, But it would be better to rename it to something else. Or even better if moved to &lt;em&gt;www&lt;/em&gt; itself. Since these files are used by www.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="conclusion-and-further-plans"&gt;
&lt;h2&gt;Conclusion and Further Plans&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Move &lt;code&gt;vendor&lt;/code&gt; scripts to &lt;code&gt;www&lt;/code&gt; directory.&lt;/li&gt;
&lt;li&gt;Implement installing for FOSSology cli.&lt;/li&gt;
&lt;li&gt;Implement installing configuration scripts.&lt;/li&gt;
&lt;li&gt;Finish installation for testing&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</content><category term="report"></category><category term="gsoc"></category><category term="FOSSology"></category></entry><entry><title>Coding Week 4 Meeting-1</title><link href="https://gsoc.avinal.space/posts/report/meeting-5.html" rel="alternate"></link><published>2021-06-29T23:22:00+05:30</published><updated>2021-06-29T23:22:00+05:30</updated><author><name>Avinal Kumar</name></author><id>tag:gsoc.avinal.space,2021-06-29:/posts/report/meeting-5.html</id><summary type="html">&lt;p class="first last"&gt;In this seventh meeting question related to installing the FOSSology were discussed.&lt;/p&gt;
</summary><content type="html">&lt;div class="alert alert-info" role="alert"&gt;In this seventh meeting question related to installing the FOSSology were discussed. &lt;/div&gt;&lt;div class="section" id="attendees"&gt;
&lt;h2&gt;Attendees&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/mcjaeger"&gt;Michael C. Jaeger&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/GMishx"&gt;Gaurav Mishra&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/avinal"&gt;Avinal Kumar&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="week-4-progress"&gt;
&lt;h2&gt;Week 4 Progress&lt;/h2&gt;
&lt;div class="alert alert-success" role="alert"&gt;
&lt;ul&gt;&lt;li&gt;CMake configuration files have been refactored to make each agent as a separate sub-project.&lt;/li&gt;
&lt;li&gt;Symbolic links are installing.&lt;/li&gt;
&lt;li&gt;VERSION files can be generated now during configure step&lt;/li&gt;
&lt;li&gt;To test the current progress, follow the instructions &lt;a href="https://github.com/avinal/FOSSology/wiki#test-the-new-system-only-gcc-with-make-and-ninja-tested-for-now"&gt;here&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;div class="section" id="discussions"&gt;
&lt;h2&gt;Discussions&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p class="first"&gt;&lt;strong&gt;There are two types of replacements CMake can configure file with.&lt;/strong&gt; &lt;code&gt;&amp;#64;VARIABLE&amp;#64;&lt;/code&gt; &lt;strong&gt;and&lt;/strong&gt; &lt;code&gt;${VARIABLE}&lt;/code&gt; &lt;strong&gt;. Since in PHP&lt;/strong&gt; &lt;code&gt;$variable&lt;/code&gt; &lt;strong&gt;is used, it may create problem for CMake replacements. So may I replace them?&lt;/strong&gt;&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Yeah sure, go ahead. It will be more robust.&lt;/li&gt;
&lt;li&gt;The replacement of &lt;code&gt;$VARIABLE&lt;/code&gt; can be stopped by using &lt;code&gt;&amp;#64;ONLY&lt;/code&gt; option in &lt;code&gt;configure_file(...)&lt;/code&gt; command.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;&lt;strong&gt;How to generate vendor directory?&lt;/strong&gt;&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;The code for generating vendor directory is in &lt;code&gt;src/Makefile&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Before executing code for the generation, make sure to copy &lt;code&gt;composer.json&lt;/code&gt; and &lt;code&gt;composer.lock&lt;/code&gt; to the target directory.&lt;/li&gt;
&lt;li&gt;There is also a patch that FOSSology needs to function as intended. Make sure to run that patch to check and apply.&lt;/li&gt;
&lt;li&gt;For now, we generate &lt;em&gt;vendor&lt;/em&gt; while building, but it would be nice if it can be generated in the build step.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;&lt;strong&gt;Currently I am generating the VERSION file in configure step itself. Should I move it to the build or install step?&lt;/strong&gt;&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Yeah, please move it to the build step. As in configure step the data might be outdated.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;&lt;strong&gt;Is there any configuration for Release that we can use to install or test?&lt;/strong&gt; &lt;em&gt;(Michael)&lt;/em&gt;&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Yeah, there are 4 inbuilt configurations for various levels of optimization and can be applied to tests and installation.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;&lt;strong&gt;Is the VERSION file is generated for each agent or whole project at once? Because in the latter case, the VERSION file can be generated as the last step.&lt;/strong&gt;&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;No agent has a VERSION file along with the main VERSION file for FOSSology.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;&lt;strong&gt;How I can build and install a single agent or component?&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p class="first"&gt;There are two ways you can build and install a specific agent or component only.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;The first one is quite simple. Just change your directory to the specific agent's directory and run all the usual commands for building and installing.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;The second one is a bit for typing work. This can be used directly from the top-level directory. After configuring the CMake, you can run the following command to install the specific component.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# for Unix Makefiles&lt;/span&gt;
make&lt;span class="w"&gt; &lt;/span&gt;list_install_component&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="c1"&gt;# this will list all the available components&lt;/span&gt;
cmake&lt;span class="w"&gt; &lt;/span&gt;-DCOMPONENT&lt;span class="o"&gt;=&lt;/span&gt;&amp;lt;component-name&amp;gt;&lt;span class="w"&gt; &lt;/span&gt;-P&lt;span class="w"&gt; &lt;/span&gt;cmake_install.cmake
&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;I am writing a macro that will let us install a component by simply running &lt;code&gt;make install component&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="conclusion-and-further-plans"&gt;
&lt;h2&gt;Conclusion and Further Plans&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Implement generation of vendor directory.&lt;/li&gt;
&lt;li&gt;Move VERSION file generation to build step.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</content><category term="report"></category><category term="gsoc"></category><category term="FOSSology"></category></entry><entry><title>Coding Week 3 Meeting</title><link href="https://gsoc.avinal.space/posts/report/meeting-4.html" rel="alternate"></link><published>2021-06-22T23:22:00+05:30</published><updated>2021-06-22T23:22:00+05:30</updated><author><name>Avinal Kumar</name></author><id>tag:gsoc.avinal.space,2021-06-22:/posts/report/meeting-4.html</id><summary type="html">&lt;p class="first last"&gt;In this fifth meeting, question related to versioning and obtaining commit hash were discussed, this was a short meeting.&lt;/p&gt;
</summary><content type="html">&lt;div class="alert alert-info" role="alert"&gt;In this fifth meeting, question related to versioning and obtaining commit hash were discussed, this was a short meeting. &lt;/div&gt;&lt;div class="section" id="attendees"&gt;
&lt;h2&gt;Attendees&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/mcjaeger"&gt;Michael C. Jaeger&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/GMishx"&gt;Gaurav Mishra&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/avinal"&gt;Avinal Kumar&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="week-3-progress"&gt;
&lt;h2&gt;Week 3 Progress&lt;/h2&gt;
&lt;div class="alert alert-success" role="alert"&gt;
&lt;ul&gt;&lt;li&gt;Version file Implementation&lt;/li&gt;
&lt;li&gt;Initial functions on obtaining commit and branch info&lt;/li&gt;
&lt;li&gt;To test the current progress, follow the instructions &lt;a href="https://github.com/avinal/FOSSology/wiki#test-the-new-system-only-gcc-with-make-and-ninja-tested-for-now"&gt;here&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;div class="section" id="discussions"&gt;
&lt;h2&gt;Discussions&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p class="first"&gt;&lt;strong&gt;What is the regex expression used for obtaining version information?&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p class="first"&gt;The regex has recently been modified to cover recent versions. The latest form is as below:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;([[&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;digit&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="p"&gt;]]&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="p"&gt;.[[&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;digit&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="p"&gt;]]&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="p"&gt;.[[&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;digit&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="p"&gt;]]&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="p"&gt;)(&lt;/span&gt;&lt;span class="o"&gt;-?&lt;/span&gt;&lt;span class="n"&gt;rc&lt;/span&gt;&lt;span class="p"&gt;[[&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;digit&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="p"&gt;]]&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;?-?&lt;/span&gt;&lt;span class="p"&gt;([[&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;digit&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="p"&gt;]]&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;-?&lt;/span&gt;&lt;span class="p"&gt;[[&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;alnum&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="p"&gt;]]&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;You can also try alternatives to regex if possible for CMake.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;&lt;strong&gt;Should I use&lt;/strong&gt; &lt;code&gt;git describe --tags&lt;/code&gt; &lt;strong&gt;or&lt;/strong&gt; &lt;code&gt;git describe --always HEAD&lt;/code&gt; &lt;strong&gt;for obtaining version information?&lt;/strong&gt;&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;In FOSSology we always use &lt;code&gt;git describe --tags&lt;/code&gt;, no exception whatsoever.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;CMake provides a preset configuration for the install path on GNU systems, you can see the description &lt;a class="reference external" href="https://cmake.org/cmake/help/v3.10/module/GNUInstallDirs.html"&gt;here&lt;/a&gt; based on the &lt;a class="reference external" href="https://www.gnu.org/prep/standards/html_node/Directory-Variables.html"&gt;configuration&lt;/a&gt; suggested by the GNU   After comparing the variables defined in Makefile.conf with these, it seems directly taken from GNU standards.
So I wanted to ask if this would be okay to stick to the presets, instead of manually declaring the same paths? The former step will reduce the number of variables we are currently caching and will make it flexible for different installation scenarios.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Using the GNU standards is the ideal situation but FOSSology uses slightly different locations. For example, all agents end up under &lt;code&gt;/usr/local/share/fossology/&lt;/code&gt; with their individual folders instead of going to &lt;code&gt;/usr/local/bin/&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;If the same results can be achieved by using the &lt;code&gt;CMAKE_INSTALL_&amp;lt;dir&amp;gt;&lt;/code&gt;  and &lt;code&gt;CMAKE_INSTALL_PREFIX&lt;/code&gt; then yeah, it will be preferred.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="conclusion-and-further-plans"&gt;
&lt;h2&gt;Conclusion and Further Plans&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Try adding the version and commit hash info.&lt;/li&gt;
&lt;li&gt;Implement writing version files for each build.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</content><category term="report"></category><category term="gsoc"></category><category term="FOSSology"></category></entry><entry><title>Coding Week 2 Meeting</title><link href="https://gsoc.avinal.space/posts/report/meeting-3.html" rel="alternate"></link><published>2021-06-18T23:30:00+05:30</published><updated>2021-06-18T23:30:00+05:30</updated><author><name>Avinal Kumar</name></author><id>tag:gsoc.avinal.space,2021-06-18:/posts/report/meeting-3.html</id><summary type="html">&lt;p class="first last"&gt;In this fourth meeting, a lot of questions were discussed related to the existing build system and what things we have to drop or modify.&lt;/p&gt;
</summary><content type="html">&lt;div class="alert alert-info" role="alert"&gt;In this fourth meeting, a lot of questions were discussed related to the existing build system and what things we have to drop or modify. &lt;/div&gt;&lt;div class="section" id="attendees"&gt;
&lt;h2&gt;Attendees&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/mcjaeger"&gt;Michael C. Jaeger&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/shaheemazmalmmd"&gt;Shaheem Azmal M MD&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/GMishx"&gt;Gaurav Mishra&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/avinal"&gt;Avinal Kumar&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="week-2-progress"&gt;
&lt;h2&gt;Week 2 Progress&lt;/h2&gt;
&lt;div class="alert alert-success" role="alert"&gt;
&lt;p&gt;This week was mainly focused on creating CMake configuration for libraries, executables and coverage.
&lt;ul&gt;&lt;li&gt;Added the configuration for libraries and executables&lt;/li&gt;
&lt;li&gt;Resolved parallel build problems with coverage configs&lt;/li&gt;
&lt;li&gt;Implemented generated source configurations&lt;/li&gt;
&lt;li&gt;To test the current progress, follow the instructions &lt;a href="https://github.com/avinal/FOSSology/wiki#test-the-new-system-only-gcc-with-make-and-ninja-tested-for-now"&gt;here&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="embed-responsive embed-responsive-16by9"&gt;
    &lt;iframe class="embed-responsive-item" src="/images/second-build.webm" allowfullscreen&gt;&lt;/iframe&gt;
&lt;/div&gt;
&lt;br&gt;&lt;/div&gt;
&lt;div class="section" id="discussions"&gt;
&lt;h2&gt;Discussions&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;strong&gt;Should I generalize the coverage build for each agent?&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;Coverage depends on the agent_tests and may or may not be available for all the agent. So follow the Makefiles and add the configuration as it is in them.&lt;/li&gt;
&lt;li&gt;Leave coverage for them who don't have it already in their Makefiles.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;What are :code:`$(AGENTLIB) $(REPO) $(DB)` in the Makefiles?&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;They seems to be remains of previous build configuration. Until there is a problem, ignore if you can not find the definitions.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Can I refactor the directory structure of nomos and monk, it will help keep the source code generation out of source directory?&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;Yeah, sure. As long as it does not affects the working of the project you may refactor them to suit your needs.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;I am facing problems with due to headers included using angled brackets, can I change them to double quotes instead?&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;Yeah that would be okay, anyway the general practice is to add user header files using double quotes.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Using -Werror flag in regexscan causes build to fail, should I remove it?&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;Since &lt;code&gt;regexscan&lt;/code&gt; is not the part of default build you can ignore it.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;In scheduler source code the preprocessor macro value  for FOSSDB_CONF is different from that in lib, is that correct?&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;We have made some changes, please change it to the same as in lib.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="conclusion-and-further-plans"&gt;
&lt;h2&gt;Conclusion and Further Plans&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Try adding the version and commit hash info.&lt;/li&gt;
&lt;li&gt;Implement writing version files for each build.&lt;/li&gt;
&lt;li&gt;Add proper comments in the &lt;code&gt;CMakeLists.txt&lt;/code&gt; files.&lt;/li&gt;
&lt;li&gt;Complete the coverage build configuration&lt;/li&gt;
&lt;li&gt;Start implementing the install configurations&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</content><category term="report"></category><category term="gsoc"></category><category term="FOSSology"></category></entry><entry><title>Coding Week 1 Meeting</title><link href="https://gsoc.avinal.space/posts/report/meeting-2.html" rel="alternate"></link><published>2021-06-11T23:30:00+05:30</published><updated>2021-06-11T23:30:00+05:30</updated><author><name>Avinal Kumar</name></author><id>tag:gsoc.avinal.space,2021-06-11:/posts/report/meeting-2.html</id><summary type="html">&lt;p class="first last"&gt;In this third meeting, I demoed the working build system, currently building executables and libraries, a lot of queries were resolved about writing version files and attaching commits and hashes to the build.&lt;/p&gt;
</summary><content type="html">&lt;div class="alert alert-info" role="alert"&gt;In this third meeting, I demoed the working build system, currently building executables and libraries, a lot of queries were resolved about writing version files and attaching commits and hashes to the build. &lt;/div&gt;&lt;div class="section" id="attendees"&gt;
&lt;h2&gt;Attendees&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/mcjaeger"&gt;Michael C. Jaeger&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/shaheemazmalmmd"&gt;Shaheem Azmal M MD&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/GMishx"&gt;Gaurav Mishra&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/ag4ums"&gt;Anupam Ghosh&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/hastagAB"&gt;Ayush Bhardwaj&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/avinal"&gt;Avinal Kumar&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="week-1-progress"&gt;
&lt;h2&gt;Week 1 Progress&lt;/h2&gt;
&lt;div class="alert alert-success" role="alert"&gt;
&lt;p&gt;This week was mainly focused on analyzing the previous build system and framing a skeleton for the new build system.
&lt;ul&gt;&lt;li&gt;Created the build configuration &lt;a href="https://github.com/avinal/FOSSology/wiki/agents-spec#agents-configuration-list"&gt;analysis table&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Completed the basic skeleton.&lt;/li&gt;
&lt;li&gt;Completed the CMake configuration for libraries&lt;/li&gt;
&lt;li&gt;To test the current progress, follow the instructions &lt;a href="https://github.com/avinal/FOSSology/wiki#test-the-new-system-only-gcc-with-make-and-ninja-tested-for-now"&gt;here&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Test on &lt;a href="https://gitpod.io/#https://github.com/avinal/FOSSology/tree/avinal/feat/cmake-buildsystem"&gt;GitPod&lt;/a&gt; right inside your browser. &lt;/li&gt;&lt;/ul&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="embed-responsive embed-responsive-16by9"&gt;
    &lt;iframe class="embed-responsive-item" src="/images/first-build-gitpod.webm" allowfullscreen&gt;&lt;/iframe&gt;
&lt;/div&gt;
&lt;br&gt;&lt;/div&gt;
&lt;div class="section" id="discussions"&gt;
&lt;h2&gt;Discussions&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;strong&gt;What are the flags needed for C and C++?&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;The &lt;code&gt;-g&lt;/code&gt; flag enables debug.&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;-O2&lt;/code&gt; flag is used for optimizing.&lt;/li&gt;
&lt;li&gt;In FOSSology these two flags are used together by default for all build purposes because it is desired to have an optimized binary but some level of debugging information is also desired.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;The Makefiles have some compile-time preprocessor macro definitions that need to be passed to each build.&lt;/strong&gt; The Makefiles have all the path values passed as &lt;code&gt;'&amp;quot;..value..&amp;quot;'&lt;/code&gt; format &lt;em&gt;(double quote inside single quotes)&lt;/em&gt;, however the commands produced by CMake have &lt;code&gt;\&amp;quot;..value..\&amp;quot;&lt;/code&gt; format &lt;em&gt;(escaped double quotes)&lt;/em&gt;. Are they the same or it needs to be changed?&lt;ul&gt;
&lt;li&gt;Currently, there is nothing to determine if they work the same or not, but if the compiler would not have accepted them then, it would have thrown an error. As long it is working these should be fine, but will need to be checked in the final build.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Are all libraries in FOSSology static?&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;No, by default no library is static. The format &lt;code&gt;lib&amp;lt;library-name&amp;gt;.a&lt;/code&gt; is confusing but no need to worry about it for now, if this is working fine then no problem.&lt;/li&gt;
&lt;li&gt;In general, this format denotes a static library.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;How to add the version and commit information to the builds?&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;I have gone through &lt;a class="reference external" href="https://cmake.org/pipermail/cmake/2018-October/068383.html"&gt;this thread&lt;/a&gt; on CMake's official mailing list. And they have suggested a lot of options, but unable to decide which option to use. Gaurav said he will see into this thread and for now, I should try writing a shell script and test if that works.&lt;/li&gt;
&lt;li&gt;Same can be tested for the version too.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;What is&lt;/strong&gt; &lt;code&gt;_squareVisitor.h.pre&lt;/code&gt; &lt;strong&gt;used for?&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;They are used to generate source code at build time.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Is there any inheritance structure in the build system?&lt;/strong&gt; &lt;em&gt;(Michael)&lt;/em&gt;&lt;ul&gt;
&lt;li&gt;For now, I am writing separate modules for the default operations needed in most configurations. The final structure will be decided in the final build.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Where are all the binaries produced?&lt;/strong&gt; &lt;em&gt;(Gaurav)&lt;/em&gt;&lt;ul&gt;
&lt;li&gt;They are located in the build folder with the same directory structure as the original project.&lt;/li&gt;
&lt;li&gt;While installing the same will be used and none of the source folders are ever disturbed.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Are all flags taken from the Makefiles itself?&lt;/strong&gt; &lt;em&gt;(Anupam)&lt;/em&gt;&lt;ul&gt;
&lt;li&gt;Yes and No, there are some flags that CMake uses by default, they can be altered by changing the value for &lt;code&gt;CMAKE_C_FLAGS&lt;/code&gt; and &lt;code&gt;CMAKE_CXX_FLAGS&lt;/code&gt;. One can also append their flags. Since not all compilation requires all the flags, I have taken the default one into cache variables, and others are appended while configuring for a particular project.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="conclusion-and-further-plans"&gt;
&lt;h2&gt;Conclusion and Further Plans&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Try the &lt;code&gt;monkbulk&lt;/code&gt; in monk and &lt;code&gt;makefile.sa&lt;/code&gt; in nomos.&lt;/li&gt;
&lt;li&gt;Try adding the version and commit hash info.&lt;/li&gt;
&lt;li&gt;Implement writing version files for each build.&lt;/li&gt;
&lt;li&gt;Add proper comments in the &lt;code&gt;CMakeLists.txt&lt;/code&gt; files.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</content><category term="report"></category><category term="gsoc"></category><category term="FOSSology"></category></entry></feed>